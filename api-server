#!/usr/bin/env perl
use Mojolicious::Lite;

use FindBin qw($RealBin);
use lib "$RealBin/lib";
use Apokalo::API::Schedule;

use JSON;

use Data::Printer;

our $api = Apokalo::API::Schedule->new;

my $HTTP_CB_API_WORKERS = int($ENV{HTTP_CB_API_WORKERS}) || 4;
my $HTTP_CB_API_PORT    = int($ENV{HTTP_CB_API_PORT})    || 2626;

app->config(
    hypnotoad => {
        listen  => [ "http://*:$HTTP_CB_API_PORT" ],
        workers => $HTTP_CB_API_WORKERS,,
    },
);

post '/schedule' => sub {
    my $c = shift;

    my $query_params = $c->req->query_params->to_hash;

    my $code = 201;
    my $ret = eval { $api->add(%{ $query_params }) };
    if ($@) {
        $code = 400;
        my $err_msg = ref $@ eq 'Error::TypeTiny::Assertion' ? $@->message : "$@";
        chomp $err_msg;
        $err_msg =~ s/ at .+//;
        $err_msg =~ s/\(in.+args.+\{(.+)\}.+/on param $1/;

        $ret = { error => $err_msg };
    }

    $c->redirect_to($c->url_for('/schedule/' . $ret->{id})) if $code == 201;

    $c->render(
        json   => encode_json($ret),
        status => $code,
    );
};

post '/schedule/bulk' => sub {
    my $c = shift;

    my $body_params = $c->req->json;
    return $c->render( json => {error => "body is not array"}, status => 400 )
      unless ref $body_params eq 'ARRAY';

    my $code = 200;
    my $ret  = eval { $api->add_bulk(@{ $body_params }) };
    if ($@) {
        $code = 400;
        my $err_msg = ref $@ eq 'Error::TypeTiny::Assertion' ? $@->message : "$@";
        chomp $err_msg;
        $err_msg =~ s/ at .+//;
        $err_msg =~ s/\(in.+args.+\{(.+)\}.+/on param $1/;

        $ret = { error => $err_msg };
    }

    $c->render( json => encode_json({ ids => $ret }), status => $code );
};

get '/schedule/:id' => sub {
    my $c = shift;

    my $code = 200;
    my $ret = eval { $api->get( id => $c->param('id') ) };
    if ($@) {
        $code = 400;
        my $err_msg = ref $@ eq 'Error::TypeTiny::Assertion' ? $@->message : "$@";
        chomp $err_msg;
        $err_msg =~ s/ at .+//;
        $err_msg =~ s/\(in.+args.+\{(.+)\}.+/on param $1/;

        $ret = { error => $err_msg };
    }

    return $c->render( json => encode_json( {error => 'Object not found'} ), status => 404 )
      unless $ret;

    $c->render( json => encode_json($ret), status => $code );
};

get '/schedule/*' => sub {
    my $c = shift;

    $c->render( json => { error => 'Method not allowed' }, status => 405 );
};

any '/(*)' => sub {
    my $c = shift;

    $c->render( json => encode_json( {error => 'Page not found'} ), status => 404 );
};

app->max_request_size(16777216);
app->start;

