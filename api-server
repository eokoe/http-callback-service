#!/usr/bin/env perl
use FindBin qw($RealBin);
use lib "$RealBin/lib";

use Mojolicious::Lite;
use Apokalo::API::Schedule;

my $HTTP_CB_API_WORKERS = $ENV{HTTP_CB_API_WORKERS} || 4;
my $HTTP_CB_API_PORT    = $ENV{HTTP_CB_API_PORT}    || 2626;

app->config(
    hypnotoad => {
        listen  => [ "http://*:$HTTP_CB_API_PORT" ],
        workers => $HTTP_CB_API_WORKERS,
    },
);

helper 'api' => sub { state $api = Apokalo::API::Schedule->new };

post '/schedule' => sub {
    my $c = shift;

    my $code = 201;
    my $ret = eval { $c->api->add(%{ $c->req->query_params->to_hash }) };
    if ($@) {
        $code = 400;
        my $err_msg = ref $@ eq 'Error::TypeTiny::Assertion' ? $@->message : "$@";
        chomp $err_msg;
        $err_msg =~ s/ at .+//;
        $err_msg =~ s/\(in.+args.+\{(.+)\}.+/on param $1/;

        $ret = { error => $err_msg };
    }

    $c->redirect_to( $c->url_for( 'scheduleid', id => $ret->{id}  )) if $code == 201;
    $c->render( json => $ret, status => $code );
};

post '/schedule/bulk' => sub {
    my $c = shift;

    my $body_params = $c->req->json;

    return $c->render( json => { error => "body is not array" }, status => 400 )
      unless ref $body_params eq 'ARRAY';

    my $code = 200;
    my $ret  = eval { $c->api->add_bulk(@{ $body_params }) };
    if ($@) {
        $code = 400;
        my $err_msg = ref $@ eq 'Error::TypeTiny::Assertion' ? $@->message : "$@";
        chomp $err_msg;
        $err_msg =~ s/ at .+//;
        $err_msg =~ s/\(in.+args.+\{(.+)\}.+/on param $1/;

        $ret = { error => $err_msg };
    }

    $c->render( json => { id => $ret }, status => $code );
};

get '/schedule/:id' => sub {
    my $c = shift;

    my $code = 200;
    my $ret = eval { $c->api->get( id => $c->param('id') ) };
    if ($@) {
        $code = 400;
        my $err_msg = ref $@ eq 'Error::TypeTiny::Assertion' ? $@->message : "$@";
        chomp $err_msg;
        $err_msg =~ s/ at .+//;
        $err_msg =~ s/\(in.+args.+\{(.+)\}.+/on param $1/;

        $ret = { error => $err_msg };
    }

    return $c->render( json => { error => 'Object not found' }, status => 404 )
      unless $ret;

    $c->render( json => $ret, status => $code );
};

get '/schedule/*' => sub {
    my $c = shift;

    $c->render( json => { error => 'Method not allowed' }, status => 405 );
};

any '/(*)' => sub {
    my $c = shift;

    $c->render( json => { error => 'Page not found' }, status => 404 );
};

app->max_request_size(16777216);
app->start;

